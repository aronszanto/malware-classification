from collections import Counter

def num_processes(tree):
    c = Counter()
    in_process = False
    for el in tree.iter():
        if el.tag == "process" and not in_process:
            in_process = True
        elif el.tag == "process" and in_process:
            in_process = False
        elif in_process and el.tag == "process":
            c["num_processes"] += 1
    return c

def map_system_calls_in_all_section(tree):
    c = Counter()
    in_all_section = False
    for el in tree.iter():
        # ignore everything outside the "all_section" element
        if el.tag == "all_section" and not in_all_section:
            in_all_section = True
        elif el.tag == "all_section" and in_all_section:
            in_all_section = False
        elif in_all_section:
            c[el.tag] += 1
    return c

def map_system_calls(tree):
    c = Counter()
    for el in tree.iter():
        c[el.tag] += 1
    return c


def total_runtime_feats(tree):
    """
    arguments:
      tree is an xml.etree.ElementTree object

    """

    def string_to_seconds(s):
        min, sec = s.split(':')
        return float(min) * 60 + float(sec)

    in_all_section = False
    for el in tree.iter():
        total = 0.
        # ignore everything outside the "all_section" element
        if el.tag == 'process':
            total += string_to_seconds(el.get('terminationtime')) - \
                     string_to_seconds(el.get('starttime'))

    return {'total_runtime': total}